<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="Registry.tt" #>
using System;
using System.Globalization;

namespace AbbyyLS.Globalization
{
	public static class ExtLanguageExtensions
	{
		public static bool ExtLanguageAvailable(this Language language)
		{
			switch(language)
			{
<#foreach(var code in extlangs.Select(_ => _.Prefix.First().ToUpper()).Distinct())
{ #>
				case Language.<#= code #>:
<# } #>
					return true;
				default:
					return false;
			}
		}

		public static Language? GetPrefix(this Language language)
		{
			switch(language)
			{
<#foreach(var entry in extlangs)
{ #>
				case Language.<#= entry.PreferredValue.ToUpper() #>: return Language.<#= entry.Prefix.First().ToUpper() #>;
<# } #>
				default:
					return null;
			}
		}

		public static Language? TryParseFromExtLanguage(this string text, Language prefix)
		{
			switch(prefix)
			{
<#foreach(var lang in extlangs.Select(_ => _.Prefix.First()).Distinct())
{ #>
				case Language.<#= lang.ToUpper() #>:
					switch (text.ToLower(CultureInfo.InvariantCulture))
					{
<#foreach(var entry in extlangs.Where(_ => _.Prefix.First() == lang))
{ #>
						case "<#= entry.Subtag.ToLower()#>": return Language.<#= entry.PreferredValue.ToUpper() #>;
<# } #>
						default: return null;
					}
<# } #>
				default:
					return null;
			}
		}
	}
}
